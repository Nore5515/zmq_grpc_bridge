// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/grpc/proto/helloworld.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greeter_SendZMQRequest_FullMethodName             = "/helloworld.Greeter/SendZMQRequest"
	Greeter_RequestSubscription_FullMethodName        = "/helloworld.Greeter/RequestSubscription"
	Greeter_HandleClientSubscription_FullMethodName   = "/helloworld.Greeter/HandleClientSubscription"
	Greeter_HandleClientUnsubscription_FullMethodName = "/helloworld.Greeter/HandleClientUnsubscription"
	Greeter_StartStream_FullMethodName                = "/helloworld.Greeter/StartStream"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Send request to ZMQ, recieve response
	SendZMQRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Front End request subscription
	RequestSubscription(ctx context.Context, in *ClientDetails, opts ...grpc.CallOption) (*Response, error)
	// Handle Subscription/Unsubscription from client
	HandleClientSubscription(ctx context.Context, in *ClientDetails, opts ...grpc.CallOption) (*Response, error)
	HandleClientUnsubscription(ctx context.Context, in *ClientDetails, opts ...grpc.CallOption) (*Response, error)
	// Starts streaming data to all subscribers
	StartStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Greeter_StartStreamClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SendZMQRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Greeter_SendZMQRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) RequestSubscription(ctx context.Context, in *ClientDetails, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Greeter_RequestSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) HandleClientSubscription(ctx context.Context, in *ClientDetails, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Greeter_HandleClientSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) HandleClientUnsubscription(ctx context.Context, in *ClientDetails, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Greeter_HandleClientUnsubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) StartStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Greeter_StartStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], Greeter_StartStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterStartStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_StartStreamClient interface {
	Recv() (*StreamData, error)
	grpc.ClientStream
}

type greeterStartStreamClient struct {
	grpc.ClientStream
}

func (x *greeterStartStreamClient) Recv() (*StreamData, error) {
	m := new(StreamData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Send request to ZMQ, recieve response
	SendZMQRequest(context.Context, *Request) (*Response, error)
	// Front End request subscription
	RequestSubscription(context.Context, *ClientDetails) (*Response, error)
	// Handle Subscription/Unsubscription from client
	HandleClientSubscription(context.Context, *ClientDetails) (*Response, error)
	HandleClientUnsubscription(context.Context, *ClientDetails) (*Response, error)
	// Starts streaming data to all subscribers
	StartStream(*emptypb.Empty, Greeter_StartStreamServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SendZMQRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendZMQRequest not implemented")
}
func (UnimplementedGreeterServer) RequestSubscription(context.Context, *ClientDetails) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSubscription not implemented")
}
func (UnimplementedGreeterServer) HandleClientSubscription(context.Context, *ClientDetails) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleClientSubscription not implemented")
}
func (UnimplementedGreeterServer) HandleClientUnsubscription(context.Context, *ClientDetails) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleClientUnsubscription not implemented")
}
func (UnimplementedGreeterServer) StartStream(*emptypb.Empty, Greeter_StartStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SendZMQRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SendZMQRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SendZMQRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SendZMQRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_RequestSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).RequestSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_RequestSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).RequestSubscription(ctx, req.(*ClientDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_HandleClientSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).HandleClientSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_HandleClientSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).HandleClientSubscription(ctx, req.(*ClientDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_HandleClientUnsubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).HandleClientUnsubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_HandleClientUnsubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).HandleClientUnsubscription(ctx, req.(*ClientDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_StartStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).StartStream(m, &greeterStartStreamServer{stream})
}

type Greeter_StartStreamServer interface {
	Send(*StreamData) error
	grpc.ServerStream
}

type greeterStartStreamServer struct {
	grpc.ServerStream
}

func (x *greeterStartStreamServer) Send(m *StreamData) error {
	return x.ServerStream.SendMsg(m)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendZMQRequest",
			Handler:    _Greeter_SendZMQRequest_Handler,
		},
		{
			MethodName: "RequestSubscription",
			Handler:    _Greeter_RequestSubscription_Handler,
		},
		{
			MethodName: "HandleClientSubscription",
			Handler:    _Greeter_HandleClientSubscription_Handler,
		},
		{
			MethodName: "HandleClientUnsubscription",
			Handler:    _Greeter_HandleClientUnsubscription_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartStream",
			Handler:       _Greeter_StartStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/grpc/proto/helloworld.proto",
}
